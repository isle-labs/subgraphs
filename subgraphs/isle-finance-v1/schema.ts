// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Token | null {
    return changetype<Token | null>(
      store.get_in_block("Token", id.toHexString()),
    );
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get lastPriceUSD(): BigDecimal | null {
    let value = this.get("lastPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastPriceUSD");
    } else {
      this.set("lastPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastPriceBlockNumber(): BigInt | null {
    let value = this.get("lastPriceBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastPriceBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("lastPriceBlockNumber");
    } else {
      this.set("lastPriceBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }
}

export class RewardToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RewardToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardToken | null {
    return changetype<RewardToken | null>(
      store.get_in_block("RewardToken", id),
    );
  }

  static load(id: string): RewardToken | null {
    return changetype<RewardToken | null>(store.get("RewardToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class InterestRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InterestRate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InterestRate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("InterestRate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InterestRate | null {
    return changetype<InterestRate | null>(
      store.get_in_block("InterestRate", id),
    );
  }

  static load(id: string): InterestRate | null {
    return changetype<InterestRate | null>(store.get("InterestRate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): BigDecimal {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rate(value: BigDecimal) {
    this.set("rate", Value.fromBigDecimal(value));
  }

  get duration(): i32 {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set duration(value: i32) {
    this.set("duration", Value.fromI32(value));
  }

  get maturityBlock(): BigInt | null {
    let value = this.get("maturityBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturityBlock(value: BigInt | null) {
    if (!value) {
      this.unset("maturityBlock");
    } else {
      this.set("maturityBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get side(): string {
    let value = this.get("side");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set side(value: string) {
    this.set("side", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tranche(): string | null {
    let value = this.get("tranche");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tranche(value: string | null) {
    if (!value) {
      this.unset("tranche");
    } else {
      this.set("tranche", Value.fromString(<string>value));
    }
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Fee", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Fee | null {
    return changetype<Fee | null>(store.get_in_block("Fee", id));
  }

  static load(id: string): Fee | null {
    return changetype<Fee | null>(store.get("Fee", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): BigDecimal | null {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set rate(value: BigDecimal | null) {
    if (!value) {
      this.unset("rate");
    } else {
      this.set("rate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get flatFee(): BigDecimal | null {
    let value = this.get("flatFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set flatFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("flatFee");
    } else {
      this.set("flatFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}

export class RevenueDetail extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RevenueDetail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RevenueDetail must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RevenueDetail", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RevenueDetail | null {
    return changetype<RevenueDetail | null>(
      store.get_in_block("RevenueDetail", id.toHexString()),
    );
  }

  static load(id: Bytes): RevenueDetail | null {
    return changetype<RevenueDetail | null>(
      store.get("RevenueDetail", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sources(): Array<string> {
    let value = this.get("sources");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set sources(value: Array<string>) {
    this.set("sources", Value.fromStringArray(value));
  }

  get amountsUSD(): Array<BigDecimal> {
    let value = this.get("amountsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set amountsUSD(value: Array<BigDecimal>) {
    this.set("amountsUSD", Value.fromBigDecimalArray(value));
  }
}

export class Oracle extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Oracle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Oracle must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Oracle", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Oracle | null {
    return changetype<Oracle | null>(
      store.get_in_block("Oracle", id.toHexString()),
    );
  }

  static load(id: Bytes): Oracle | null {
    return changetype<Oracle | null>(store.get("Oracle", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get oracleAddress(): Bytes {
    let value = this.get("oracleAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oracleAddress(value: Bytes) {
    this.set("oracleAddress", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get blockCreated(): BigInt {
    let value = this.get("blockCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockCreated(value: BigInt) {
    this.set("blockCreated", Value.fromBigInt(value));
  }

  get timestampCreated(): BigInt {
    let value = this.get("timestampCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestampCreated(value: BigInt) {
    this.set("timestampCreated", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isUSD(): boolean {
    let value = this.get("isUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isUSD(value: boolean) {
    this.set("isUSD", Value.fromBoolean(value));
  }

  get hashEnded(): Bytes | null {
    let value = this.get("hashEnded");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hashEnded(value: Bytes | null) {
    if (!value) {
      this.unset("hashEnded");
    } else {
      this.set("hashEnded", Value.fromBytes(<Bytes>value));
    }
  }

  get oracleSource(): string | null {
    let value = this.get("oracleSource");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set oracleSource(value: string | null) {
    if (!value) {
      this.unset("oracleSource");
    } else {
      this.set("oracleSource", Value.fromString(<string>value));
    }
  }
}

export class LendingProtocol extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LendingProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LendingProtocol must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LendingProtocol", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LendingProtocol | null {
    return changetype<LendingProtocol | null>(
      store.get_in_block("LendingProtocol", id.toHexString()),
    );
  }

  static load(id: Bytes): LendingProtocol | null {
    return changetype<LendingProtocol | null>(
      store.get("LendingProtocol", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get protocol(): string {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set protocol(value: string) {
    this.set("protocol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get slug(): string {
    let value = this.get("slug");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set slug(value: string) {
    this.set("slug", Value.fromString(value));
  }

  get schemaVersion(): string {
    let value = this.get("schemaVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set schemaVersion(value: string) {
    this.set("schemaVersion", Value.fromString(value));
  }

  get subgraphVersion(): string {
    let value = this.get("subgraphVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set subgraphVersion(value: string) {
    this.set("subgraphVersion", Value.fromString(value));
  }

  get methodologyVersion(): string {
    let value = this.get("methodologyVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set methodologyVersion(value: string) {
    this.set("methodologyVersion", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get lendingType(): string | null {
    let value = this.get("lendingType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lendingType(value: string | null) {
    if (!value) {
      this.unset("lendingType");
    } else {
      this.set("lendingType", Value.fromString(<string>value));
    }
  }

  get lenderPermissionType(): string | null {
    let value = this.get("lenderPermissionType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lenderPermissionType(value: string | null) {
    if (!value) {
      this.unset("lenderPermissionType");
    } else {
      this.set("lenderPermissionType", Value.fromString(<string>value));
    }
  }

  get borrowerPermissionType(): string | null {
    let value = this.get("borrowerPermissionType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set borrowerPermissionType(value: string | null) {
    if (!value) {
      this.unset("borrowerPermissionType");
    } else {
      this.set("borrowerPermissionType", Value.fromString(<string>value));
    }
  }

  get poolCreatorPermissionType(): string | null {
    let value = this.get("poolCreatorPermissionType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolCreatorPermissionType(value: string | null) {
    if (!value) {
      this.unset("poolCreatorPermissionType");
    } else {
      this.set("poolCreatorPermissionType", Value.fromString(<string>value));
    }
  }

  get riskType(): string | null {
    let value = this.get("riskType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set riskType(value: string | null) {
    if (!value) {
      this.unset("riskType");
    } else {
      this.set("riskType", Value.fromString(<string>value));
    }
  }

  get collateralizationType(): string | null {
    let value = this.get("collateralizationType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralizationType(value: string | null) {
    if (!value) {
      this.unset("collateralizationType");
    } else {
      this.set("collateralizationType", Value.fromString(<string>value));
    }
  }

  get mintedTokens(): Array<Bytes> | null {
    let value = this.get("mintedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set mintedTokens(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("mintedTokens");
    } else {
      this.set("mintedTokens", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get cumulativeUniqueDepositors(): i32 {
    let value = this.get("cumulativeUniqueDepositors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueDepositors(value: i32) {
    this.set("cumulativeUniqueDepositors", Value.fromI32(value));
  }

  get cumulativeUniqueBorrowers(): i32 {
    let value = this.get("cumulativeUniqueBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueBorrowers(value: i32) {
    this.set("cumulativeUniqueBorrowers", Value.fromI32(value));
  }

  get cumulativeUniqueLiquidators(): i32 {
    let value = this.get("cumulativeUniqueLiquidators");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLiquidators(value: i32) {
    this.set("cumulativeUniqueLiquidators", Value.fromI32(value));
  }

  get cumulativeUniqueLiquidatees(): i32 {
    let value = this.get("cumulativeUniqueLiquidatees");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLiquidatees(value: i32) {
    this.set("cumulativeUniqueLiquidatees", Value.fromI32(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get fees(): Array<string> | null {
    let value = this.get("fees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set fees(value: Array<string> | null) {
    if (!value) {
      this.unset("fees");
    } else {
      this.set("fees", Value.fromStringArray(<Array<string>>value));
    }
  }

  get revenueDetail(): Bytes | null {
    let value = this.get("revenueDetail");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set revenueDetail(value: Bytes | null) {
    if (!value) {
      this.unset("revenueDetail");
    } else {
      this.set("revenueDetail", Value.fromBytes(<Bytes>value));
    }
  }

  get totalDepositBalanceUSD(): BigDecimal {
    let value = this.get("totalDepositBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDepositBalanceUSD(value: BigDecimal) {
    this.set("totalDepositBalanceUSD", Value.fromBigDecimal(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowBalanceUSD(): BigDecimal {
    let value = this.get("totalBorrowBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowBalanceUSD(value: BigDecimal) {
    this.set("totalBorrowBalanceUSD", Value.fromBigDecimal(value));
  }

  get cumulativeBorrowUSD(): BigDecimal {
    let value = this.get("cumulativeBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeBorrowUSD(value: BigDecimal) {
    this.set("cumulativeBorrowUSD", Value.fromBigDecimal(value));
  }

  get cumulativeLiquidateUSD(): BigDecimal {
    let value = this.get("cumulativeLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeLiquidateUSD(value: BigDecimal) {
    this.set("cumulativeLiquidateUSD", Value.fromBigDecimal(value));
  }

  get mintedTokenSupplies(): Array<BigInt> | null {
    let value = this.get("mintedTokenSupplies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set mintedTokenSupplies(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("mintedTokenSupplies");
    } else {
      this.set(
        "mintedTokenSupplies",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get cumulativePositionCount(): i32 {
    let value = this.get("cumulativePositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativePositionCount(value: i32) {
    this.set("cumulativePositionCount", Value.fromI32(value));
  }

  get transactionCount(): i32 {
    let value = this.get("transactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transactionCount(value: i32) {
    this.set("transactionCount", Value.fromI32(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get borrowCount(): i32 {
    let value = this.get("borrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowCount(value: i32) {
    this.set("borrowCount", Value.fromI32(value));
  }

  get repayCount(): i32 {
    let value = this.get("repayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayCount(value: i32) {
    this.set("repayCount", Value.fromI32(value));
  }

  get liquidationCount(): i32 {
    let value = this.get("liquidationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidationCount(value: i32) {
    this.set("liquidationCount", Value.fromI32(value));
  }

  get transferCount(): i32 {
    let value = this.get("transferCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transferCount(value: i32) {
    this.set("transferCount", Value.fromI32(value));
  }

  get flashloanCount(): i32 {
    let value = this.get("flashloanCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set flashloanCount(value: i32) {
    this.set("flashloanCount", Value.fromI32(value));
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get dailyUsageMetrics(): UsageMetricsDailySnapshotLoader {
    return new UsageMetricsDailySnapshotLoader(
      "LendingProtocol",
      this.get("id")!.toBytes().toHexString(),
      "dailyUsageMetrics",
    );
  }

  get hourlyUsageMetrics(): UsageMetricsHourlySnapshotLoader {
    return new UsageMetricsHourlySnapshotLoader(
      "LendingProtocol",
      this.get("id")!.toBytes().toHexString(),
      "hourlyUsageMetrics",
    );
  }

  get financialMetrics(): FinancialsDailySnapshotLoader {
    return new FinancialsDailySnapshotLoader(
      "LendingProtocol",
      this.get("id")!.toBytes().toHexString(),
      "financialMetrics",
    );
  }

  get markets(): MarketLoader {
    return new MarketLoader(
      "LendingProtocol",
      this.get("id")!.toBytes().toHexString(),
      "markets",
    );
  }
}

export class _MarketList extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _MarketList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type _MarketList must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_MarketList", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): _MarketList | null {
    return changetype<_MarketList | null>(
      store.get_in_block("_MarketList", id.toHexString()),
    );
  }

  static load(id: Bytes): _MarketList | null {
    return changetype<_MarketList | null>(
      store.get("_MarketList", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get markets(): Array<Bytes> {
    let value = this.get("markets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set markets(value: Array<Bytes>) {
    this.set("markets", Value.fromBytesArray(value));
  }
}

export class UsageMetricsDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsDailySnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UsageMetricsDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UsageMetricsDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UsageMetricsDailySnapshot | null {
    return changetype<UsageMetricsDailySnapshot | null>(
      store.get_in_block("UsageMetricsDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): UsageMetricsDailySnapshot | null {
    return changetype<UsageMetricsDailySnapshot | null>(
      store.get("UsageMetricsDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get days(): i32 {
    let value = this.get("days");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set days(value: i32) {
    this.set("days", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get dailyActiveUsers(): i32 {
    let value = this.get("dailyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveUsers(value: i32) {
    this.set("dailyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get dailyActiveDepositors(): i32 {
    let value = this.get("dailyActiveDepositors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveDepositors(value: i32) {
    this.set("dailyActiveDepositors", Value.fromI32(value));
  }

  get cumulativeUniqueDepositors(): i32 {
    let value = this.get("cumulativeUniqueDepositors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueDepositors(value: i32) {
    this.set("cumulativeUniqueDepositors", Value.fromI32(value));
  }

  get dailyActiveBorrowers(): i32 {
    let value = this.get("dailyActiveBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveBorrowers(value: i32) {
    this.set("dailyActiveBorrowers", Value.fromI32(value));
  }

  get cumulativeUniqueBorrowers(): i32 {
    let value = this.get("cumulativeUniqueBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueBorrowers(value: i32) {
    this.set("cumulativeUniqueBorrowers", Value.fromI32(value));
  }

  get dailyActiveLiquidators(): i32 {
    let value = this.get("dailyActiveLiquidators");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveLiquidators(value: i32) {
    this.set("dailyActiveLiquidators", Value.fromI32(value));
  }

  get cumulativeUniqueLiquidators(): i32 {
    let value = this.get("cumulativeUniqueLiquidators");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLiquidators(value: i32) {
    this.set("cumulativeUniqueLiquidators", Value.fromI32(value));
  }

  get dailyActiveLiquidatees(): i32 {
    let value = this.get("dailyActiveLiquidatees");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveLiquidatees(value: i32) {
    this.set("dailyActiveLiquidatees", Value.fromI32(value));
  }

  get cumulativeUniqueLiquidatees(): i32 {
    let value = this.get("cumulativeUniqueLiquidatees");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLiquidatees(value: i32) {
    this.set("cumulativeUniqueLiquidatees", Value.fromI32(value));
  }

  get dailyTransactionCount(): i32 {
    let value = this.get("dailyTransactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyTransactionCount(value: i32) {
    this.set("dailyTransactionCount", Value.fromI32(value));
  }

  get dailyDepositCount(): i32 {
    let value = this.get("dailyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyDepositCount(value: i32) {
    this.set("dailyDepositCount", Value.fromI32(value));
  }

  get dailyWithdrawCount(): i32 {
    let value = this.get("dailyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyWithdrawCount(value: i32) {
    this.set("dailyWithdrawCount", Value.fromI32(value));
  }

  get dailyBorrowCount(): i32 {
    let value = this.get("dailyBorrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyBorrowCount(value: i32) {
    this.set("dailyBorrowCount", Value.fromI32(value));
  }

  get dailyRepayCount(): i32 {
    let value = this.get("dailyRepayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyRepayCount(value: i32) {
    this.set("dailyRepayCount", Value.fromI32(value));
  }

  get dailyLiquidateCount(): i32 {
    let value = this.get("dailyLiquidateCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyLiquidateCount(value: i32) {
    this.set("dailyLiquidateCount", Value.fromI32(value));
  }

  get dailyTransferCount(): i32 {
    let value = this.get("dailyTransferCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyTransferCount(value: i32) {
    this.set("dailyTransferCount", Value.fromI32(value));
  }

  get dailyFlashloanCount(): i32 {
    let value = this.get("dailyFlashloanCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyFlashloanCount(value: i32) {
    this.set("dailyFlashloanCount", Value.fromI32(value));
  }

  get cumulativePositionCount(): i32 {
    let value = this.get("cumulativePositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativePositionCount(value: i32) {
    this.set("cumulativePositionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get dailyActivePositions(): i32 {
    let value = this.get("dailyActivePositions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActivePositions(value: i32) {
    this.set("dailyActivePositions", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UsageMetricsHourlySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsHourlySnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UsageMetricsHourlySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UsageMetricsHourlySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UsageMetricsHourlySnapshot | null {
    return changetype<UsageMetricsHourlySnapshot | null>(
      store.get_in_block("UsageMetricsHourlySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): UsageMetricsHourlySnapshot | null {
    return changetype<UsageMetricsHourlySnapshot | null>(
      store.get("UsageMetricsHourlySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hours(): i32 {
    let value = this.get("hours");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hours(value: i32) {
    this.set("hours", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get hourlyActiveUsers(): i32 {
    let value = this.get("hourlyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyActiveUsers(value: i32) {
    this.set("hourlyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get hourlyTransactionCount(): i32 {
    let value = this.get("hourlyTransactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyTransactionCount(value: i32) {
    this.set("hourlyTransactionCount", Value.fromI32(value));
  }

  get hourlyDepositCount(): i32 {
    let value = this.get("hourlyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyDepositCount(value: i32) {
    this.set("hourlyDepositCount", Value.fromI32(value));
  }

  get hourlyWithdrawCount(): i32 {
    let value = this.get("hourlyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyWithdrawCount(value: i32) {
    this.set("hourlyWithdrawCount", Value.fromI32(value));
  }

  get hourlyBorrowCount(): i32 {
    let value = this.get("hourlyBorrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyBorrowCount(value: i32) {
    this.set("hourlyBorrowCount", Value.fromI32(value));
  }

  get hourlyRepayCount(): i32 {
    let value = this.get("hourlyRepayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyRepayCount(value: i32) {
    this.set("hourlyRepayCount", Value.fromI32(value));
  }

  get hourlyLiquidateCount(): i32 {
    let value = this.get("hourlyLiquidateCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyLiquidateCount(value: i32) {
    this.set("hourlyLiquidateCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FinancialsDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FinancialsDailySnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FinancialsDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FinancialsDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FinancialsDailySnapshot | null {
    return changetype<FinancialsDailySnapshot | null>(
      store.get_in_block("FinancialsDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): FinancialsDailySnapshot | null {
    return changetype<FinancialsDailySnapshot | null>(
      store.get("FinancialsDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get days(): i32 {
    let value = this.get("days");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set days(value: i32) {
    this.set("days", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get mintedTokenSupplies(): Array<BigInt> | null {
    let value = this.get("mintedTokenSupplies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set mintedTokenSupplies(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("mintedTokenSupplies");
    } else {
      this.set(
        "mintedTokenSupplies",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get revenueDetail(): Bytes | null {
    let value = this.get("revenueDetail");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set revenueDetail(value: Bytes | null) {
    if (!value) {
      this.unset("revenueDetail");
    } else {
      this.set("revenueDetail", Value.fromBytes(<Bytes>value));
    }
  }

  get totalDepositBalanceUSD(): BigDecimal {
    let value = this.get("totalDepositBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDepositBalanceUSD(value: BigDecimal) {
    this.set("totalDepositBalanceUSD", Value.fromBigDecimal(value));
  }

  get dailyDepositUSD(): BigDecimal {
    let value = this.get("dailyDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyDepositUSD(value: BigDecimal) {
    this.set("dailyDepositUSD", Value.fromBigDecimal(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowBalanceUSD(): BigDecimal {
    let value = this.get("totalBorrowBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowBalanceUSD(value: BigDecimal) {
    this.set("totalBorrowBalanceUSD", Value.fromBigDecimal(value));
  }

  get dailyBorrowUSD(): BigDecimal {
    let value = this.get("dailyBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyBorrowUSD(value: BigDecimal) {
    this.set("dailyBorrowUSD", Value.fromBigDecimal(value));
  }

  get cumulativeBorrowUSD(): BigDecimal {
    let value = this.get("cumulativeBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeBorrowUSD(value: BigDecimal) {
    this.set("cumulativeBorrowUSD", Value.fromBigDecimal(value));
  }

  get dailyLiquidateUSD(): BigDecimal {
    let value = this.get("dailyLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyLiquidateUSD(value: BigDecimal) {
    this.set("dailyLiquidateUSD", Value.fromBigDecimal(value));
  }

  get cumulativeLiquidateUSD(): BigDecimal {
    let value = this.get("cumulativeLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeLiquidateUSD(value: BigDecimal) {
    this.set("cumulativeLiquidateUSD", Value.fromBigDecimal(value));
  }

  get dailyWithdrawUSD(): BigDecimal {
    let value = this.get("dailyWithdrawUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyWithdrawUSD(value: BigDecimal) {
    this.set("dailyWithdrawUSD", Value.fromBigDecimal(value));
  }

  get dailyRepayUSD(): BigDecimal {
    let value = this.get("dailyRepayUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyRepayUSD(value: BigDecimal) {
    this.set("dailyRepayUSD", Value.fromBigDecimal(value));
  }

  get dailyTransferUSD(): BigDecimal {
    let value = this.get("dailyTransferUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTransferUSD(value: BigDecimal) {
    this.set("dailyTransferUSD", Value.fromBigDecimal(value));
  }

  get dailyFlashloanUSD(): BigDecimal {
    let value = this.get("dailyFlashloanUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyFlashloanUSD(value: BigDecimal) {
    this.set("dailyFlashloanUSD", Value.fromBigDecimal(value));
  }
}

export class Market extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Market must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Market", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Market | null {
    return changetype<Market | null>(
      store.get_in_block("Market", id.toHexString()),
    );
  }

  static load(id: Bytes): Market | null {
    return changetype<Market | null>(store.get("Market", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get canBorrowFrom(): boolean {
    let value = this.get("canBorrowFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set canBorrowFrom(value: boolean) {
    this.set("canBorrowFrom", Value.fromBoolean(value));
  }

  get canUseAsCollateral(): boolean {
    let value = this.get("canUseAsCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set canUseAsCollateral(value: boolean) {
    this.set("canUseAsCollateral", Value.fromBoolean(value));
  }

  get maximumLTV(): BigDecimal {
    let value = this.get("maximumLTV");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maximumLTV(value: BigDecimal) {
    this.set("maximumLTV", Value.fromBigDecimal(value));
  }

  get liquidationThreshold(): BigDecimal {
    let value = this.get("liquidationThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationThreshold(value: BigDecimal) {
    this.set("liquidationThreshold", Value.fromBigDecimal(value));
  }

  get liquidationPenalty(): BigDecimal {
    let value = this.get("liquidationPenalty");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidationPenalty(value: BigDecimal) {
    this.set("liquidationPenalty", Value.fromBigDecimal(value));
  }

  get canIsolate(): boolean {
    let value = this.get("canIsolate");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set canIsolate(value: boolean) {
    this.set("canIsolate", Value.fromBoolean(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get oracle(): Bytes | null {
    let value = this.get("oracle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set oracle(value: Bytes | null) {
    if (!value) {
      this.unset("oracle");
    } else {
      this.set("oracle", Value.fromBytes(<Bytes>value));
    }
  }

  get relation(): Bytes | null {
    let value = this.get("relation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set relation(value: Bytes | null) {
    if (!value) {
      this.unset("relation");
    } else {
      this.set("relation", Value.fromBytes(<Bytes>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get inputToken(): Bytes {
    let value = this.get("inputToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set inputToken(value: Bytes) {
    this.set("inputToken", Value.fromBytes(value));
  }

  get inputTokenBalance(): BigInt {
    let value = this.get("inputTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set inputTokenBalance(value: BigInt) {
    this.set("inputTokenBalance", Value.fromBigInt(value));
  }

  get inputTokenPriceUSD(): BigDecimal {
    let value = this.get("inputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set inputTokenPriceUSD(value: BigDecimal) {
    this.set("inputTokenPriceUSD", Value.fromBigDecimal(value));
  }

  get outputToken(): Bytes | null {
    let value = this.get("outputToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set outputToken(value: Bytes | null) {
    if (!value) {
      this.unset("outputToken");
    } else {
      this.set("outputToken", Value.fromBytes(<Bytes>value));
    }
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get exchangeRate(): BigDecimal | null {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set exchangeRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get rates(): Array<string> | null {
    let value = this.get("rates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rates(value: Array<string> | null) {
    if (!value) {
      this.unset("rates");
    } else {
      this.set("rates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get reserves(): BigDecimal | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserves(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get reserveFactor(): BigDecimal | null {
    let value = this.get("reserveFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveFactor(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserveFactor");
    } else {
      this.set("reserveFactor", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get borrowedToken(): Bytes | null {
    let value = this.get("borrowedToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set borrowedToken(value: Bytes | null) {
    if (!value) {
      this.unset("borrowedToken");
    } else {
      this.set("borrowedToken", Value.fromBytes(<Bytes>value));
    }
  }

  get variableBorrowedTokenBalance(): BigInt | null {
    let value = this.get("variableBorrowedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowedTokenBalance(value: BigInt | null) {
    if (!value) {
      this.unset("variableBorrowedTokenBalance");
    } else {
      this.set("variableBorrowedTokenBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get stableBorrowedTokenBalance(): BigInt | null {
    let value = this.get("stableBorrowedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowedTokenBalance(value: BigInt | null) {
    if (!value) {
      this.unset("stableBorrowedTokenBalance");
    } else {
      this.set("stableBorrowedTokenBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get indexLastUpdatedTimestamp(): BigInt | null {
    let value = this.get("indexLastUpdatedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set indexLastUpdatedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("indexLastUpdatedTimestamp");
    } else {
      this.set("indexLastUpdatedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get supplyIndex(): BigInt | null {
    let value = this.get("supplyIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set supplyIndex(value: BigInt | null) {
    if (!value) {
      this.unset("supplyIndex");
    } else {
      this.set("supplyIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get supplyCap(): BigInt | null {
    let value = this.get("supplyCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set supplyCap(value: BigInt | null) {
    if (!value) {
      this.unset("supplyCap");
    } else {
      this.set("supplyCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get borrowIndex(): BigInt | null {
    let value = this.get("borrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowIndex(value: BigInt | null) {
    if (!value) {
      this.unset("borrowIndex");
    } else {
      this.set("borrowIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get borrowCap(): BigInt | null {
    let value = this.get("borrowCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowCap(value: BigInt | null) {
    if (!value) {
      this.unset("borrowCap");
    } else {
      this.set("borrowCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get revenueDetail(): Bytes | null {
    let value = this.get("revenueDetail");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set revenueDetail(value: Bytes | null) {
    if (!value) {
      this.unset("revenueDetail");
    } else {
      this.set("revenueDetail", Value.fromBytes(<Bytes>value));
    }
  }

  get totalDepositBalanceUSD(): BigDecimal {
    let value = this.get("totalDepositBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDepositBalanceUSD(value: BigDecimal) {
    this.set("totalDepositBalanceUSD", Value.fromBigDecimal(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowBalanceUSD(): BigDecimal {
    let value = this.get("totalBorrowBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowBalanceUSD(value: BigDecimal) {
    this.set("totalBorrowBalanceUSD", Value.fromBigDecimal(value));
  }

  get cumulativeBorrowUSD(): BigDecimal {
    let value = this.get("cumulativeBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeBorrowUSD(value: BigDecimal) {
    this.set("cumulativeBorrowUSD", Value.fromBigDecimal(value));
  }

  get cumulativeLiquidateUSD(): BigDecimal {
    let value = this.get("cumulativeLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeLiquidateUSD(value: BigDecimal) {
    this.set("cumulativeLiquidateUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTransferUSD(): BigDecimal {
    let value = this.get("cumulativeTransferUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTransferUSD(value: BigDecimal) {
    this.set("cumulativeTransferUSD", Value.fromBigDecimal(value));
  }

  get cumulativeFlashloanUSD(): BigDecimal {
    let value = this.get("cumulativeFlashloanUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeFlashloanUSD(value: BigDecimal) {
    this.set("cumulativeFlashloanUSD", Value.fromBigDecimal(value));
  }

  get transactionCount(): i32 {
    let value = this.get("transactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transactionCount(value: i32) {
    this.set("transactionCount", Value.fromI32(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get borrowCount(): i32 {
    let value = this.get("borrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowCount(value: i32) {
    this.set("borrowCount", Value.fromI32(value));
  }

  get repayCount(): i32 {
    let value = this.get("repayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayCount(value: i32) {
    this.set("repayCount", Value.fromI32(value));
  }

  get liquidationCount(): i32 {
    let value = this.get("liquidationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidationCount(value: i32) {
    this.set("liquidationCount", Value.fromI32(value));
  }

  get transferCount(): i32 {
    let value = this.get("transferCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transferCount(value: i32) {
    this.set("transferCount", Value.fromI32(value));
  }

  get flashloanCount(): i32 {
    let value = this.get("flashloanCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set flashloanCount(value: i32) {
    this.set("flashloanCount", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get cumulativeUniqueDepositors(): i32 {
    let value = this.get("cumulativeUniqueDepositors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueDepositors(value: i32) {
    this.set("cumulativeUniqueDepositors", Value.fromI32(value));
  }

  get cumulativeUniqueBorrowers(): i32 {
    let value = this.get("cumulativeUniqueBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueBorrowers(value: i32) {
    this.set("cumulativeUniqueBorrowers", Value.fromI32(value));
  }

  get cumulativeUniqueLiquidators(): i32 {
    let value = this.get("cumulativeUniqueLiquidators");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLiquidators(value: i32) {
    this.set("cumulativeUniqueLiquidators", Value.fromI32(value));
  }

  get cumulativeUniqueLiquidatees(): i32 {
    let value = this.get("cumulativeUniqueLiquidatees");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLiquidatees(value: i32) {
    this.set("cumulativeUniqueLiquidatees", Value.fromI32(value));
  }

  get cumulativeUniqueTransferrers(): i32 {
    let value = this.get("cumulativeUniqueTransferrers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueTransferrers(value: i32) {
    this.set("cumulativeUniqueTransferrers", Value.fromI32(value));
  }

  get cumulativeUniqueFlashloaners(): i32 {
    let value = this.get("cumulativeUniqueFlashloaners");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueFlashloaners(value: i32) {
    this.set("cumulativeUniqueFlashloaners", Value.fromI32(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "positions",
    );
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get lendingPositionCount(): i32 {
    let value = this.get("lendingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lendingPositionCount(value: i32) {
    this.set("lendingPositionCount", Value.fromI32(value));
  }

  get borrowingPositionCount(): i32 {
    let value = this.get("borrowingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowingPositionCount(value: i32) {
    this.set("borrowingPositionCount", Value.fromI32(value));
  }

  get dailySnapshots(): MarketDailySnapshotLoader {
    return new MarketDailySnapshotLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "dailySnapshots",
    );
  }

  get hourlySnapshots(): MarketHourlySnapshotLoader {
    return new MarketHourlySnapshotLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "hourlySnapshots",
    );
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "borrows",
    );
  }

  get repays(): RepayLoader {
    return new RepayLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "repays",
    );
  }

  get liquidates(): LiquidateLoader {
    return new LiquidateLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "liquidates",
    );
  }

  get transfers(): TransferLoader {
    return new TransferLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "transfers",
    );
  }

  get flashloans(): FlashloanLoader {
    return new FlashloanLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "flashloans",
    );
  }

  get _poolConfigurator(): Bytes | null {
    let value = this.get("_poolConfigurator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _poolConfigurator(value: Bytes | null) {
    if (!value) {
      this.unset("_poolConfigurator");
    } else {
      this.set("_poolConfigurator", Value.fromBytes(<Bytes>value));
    }
  }

  get _loanManager(): Bytes | null {
    let value = this.get("_loanManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _loanManager(value: Bytes | null) {
    if (!value) {
      this.unset("_loanManager");
    } else {
      this.set("_loanManager", Value.fromBytes(<Bytes>value));
    }
  }

  get _withdrawalManager(): Bytes | null {
    let value = this.get("_withdrawalManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _withdrawalManager(value: Bytes | null) {
    if (!value) {
      this.unset("_withdrawalManager");
    } else {
      this.set("_withdrawalManager", Value.fromBytes(<Bytes>value));
    }
  }

  get _prevRevenue(): BigInt | null {
    let value = this.get("_prevRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _prevRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("_prevRevenue");
    } else {
      this.set("_prevRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get _loans(): _LoanLoader {
    return new _LoanLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "_loans",
    );
  }

  get _admin(): Bytes | null {
    let value = this.get("_admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _admin(value: Bytes | null) {
    if (!value) {
      this.unset("_admin");
    } else {
      this.set("_admin", Value.fromBytes(<Bytes>value));
    }
  }

  get _maxCoverLiquidation(): BigInt | null {
    let value = this.get("_maxCoverLiquidation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _maxCoverLiquidation(value: BigInt | null) {
    if (!value) {
      this.unset("_maxCoverLiquidation");
    } else {
      this.set("_maxCoverLiquidation", Value.fromBigInt(<BigInt>value));
    }
  }

  get _poolCover(): BigInt | null {
    let value = this.get("_poolCover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _poolCover(value: BigInt | null) {
    if (!value) {
      this.unset("_poolCover");
    } else {
      this.set("_poolCover", Value.fromBigInt(<BigInt>value));
    }
  }

  get _adminFee(): BigInt | null {
    let value = this.get("_adminFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _adminFee(value: BigInt | null) {
    if (!value) {
      this.unset("_adminFee");
    } else {
      this.set("_adminFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get _currentWithdrawalCycleId(): i32 {
    let value = this.get("_currentWithdrawalCycleId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set _currentWithdrawalCycleId(value: i32) {
    this.set("_currentWithdrawalCycleId", Value.fromI32(value));
  }

  get _exitConfigs(): _ExitConfigsLoader {
    return new _ExitConfigsLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "_exitConfigs",
    );
  }

  get _lockedLiquidityInWindow(): BigInt | null {
    let value = this.get("_lockedLiquidityInWindow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _lockedLiquidityInWindow(value: BigInt | null) {
    if (!value) {
      this.unset("_lockedLiquidityInWindow");
    } else {
      this.set("_lockedLiquidityInWindow", Value.fromBigInt(<BigInt>value));
    }
  }

  get _withdrawalRequests(): _WithdrawalRequestLoader {
    return new _WithdrawalRequestLoader(
      "Market",
      this.get("id")!.toBytes().toHexString(),
      "_withdrawalRequests",
    );
  }
}

export class MarketDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketDailySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MarketDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MarketDailySnapshot | null {
    return changetype<MarketDailySnapshot | null>(
      store.get_in_block("MarketDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): MarketDailySnapshot | null {
    return changetype<MarketDailySnapshot | null>(
      store.get("MarketDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get days(): i32 {
    let value = this.get("days");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set days(value: i32) {
    this.set("days", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get relation(): Bytes | null {
    let value = this.get("relation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set relation(value: Bytes | null) {
    if (!value) {
      this.unset("relation");
    } else {
      this.set("relation", Value.fromBytes(<Bytes>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get inputTokenBalance(): BigInt {
    let value = this.get("inputTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set inputTokenBalance(value: BigInt) {
    this.set("inputTokenBalance", Value.fromBigInt(value));
  }

  get inputTokenPriceUSD(): BigDecimal {
    let value = this.get("inputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set inputTokenPriceUSD(value: BigDecimal) {
    this.set("inputTokenPriceUSD", Value.fromBigDecimal(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get exchangeRate(): BigDecimal | null {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set exchangeRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get rates(): Array<string> | null {
    let value = this.get("rates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rates(value: Array<string> | null) {
    if (!value) {
      this.unset("rates");
    } else {
      this.set("rates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get reserves(): BigDecimal | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserves(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get reserveFactor(): BigDecimal | null {
    let value = this.get("reserveFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserveFactor(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserveFactor");
    } else {
      this.set("reserveFactor", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get variableBorrowedTokenBalance(): BigInt | null {
    let value = this.get("variableBorrowedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowedTokenBalance(value: BigInt | null) {
    if (!value) {
      this.unset("variableBorrowedTokenBalance");
    } else {
      this.set("variableBorrowedTokenBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get stableBorrowedTokenBalance(): BigInt | null {
    let value = this.get("stableBorrowedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowedTokenBalance(value: BigInt | null) {
    if (!value) {
      this.unset("stableBorrowedTokenBalance");
    } else {
      this.set("stableBorrowedTokenBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get supplyCap(): BigInt | null {
    let value = this.get("supplyCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set supplyCap(value: BigInt | null) {
    if (!value) {
      this.unset("supplyCap");
    } else {
      this.set("supplyCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get borrowCap(): BigInt | null {
    let value = this.get("borrowCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowCap(value: BigInt | null) {
    if (!value) {
      this.unset("borrowCap");
    } else {
      this.set("borrowCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get revenueDetail(): Bytes | null {
    let value = this.get("revenueDetail");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set revenueDetail(value: Bytes | null) {
    if (!value) {
      this.unset("revenueDetail");
    } else {
      this.set("revenueDetail", Value.fromBytes(<Bytes>value));
    }
  }

  get totalDepositBalanceUSD(): BigDecimal {
    let value = this.get("totalDepositBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDepositBalanceUSD(value: BigDecimal) {
    this.set("totalDepositBalanceUSD", Value.fromBigDecimal(value));
  }

  get dailyDepositUSD(): BigDecimal {
    let value = this.get("dailyDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyDepositUSD(value: BigDecimal) {
    this.set("dailyDepositUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeDeposit(): BigInt {
    let value = this.get("dailyNativeDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeDeposit(value: BigInt) {
    this.set("dailyNativeDeposit", Value.fromBigInt(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowBalanceUSD(): BigDecimal {
    let value = this.get("totalBorrowBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowBalanceUSD(value: BigDecimal) {
    this.set("totalBorrowBalanceUSD", Value.fromBigDecimal(value));
  }

  get dailyBorrowUSD(): BigDecimal {
    let value = this.get("dailyBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyBorrowUSD(value: BigDecimal) {
    this.set("dailyBorrowUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeBorrow(): BigInt {
    let value = this.get("dailyNativeBorrow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeBorrow(value: BigInt) {
    this.set("dailyNativeBorrow", Value.fromBigInt(value));
  }

  get cumulativeBorrowUSD(): BigDecimal {
    let value = this.get("cumulativeBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeBorrowUSD(value: BigDecimal) {
    this.set("cumulativeBorrowUSD", Value.fromBigDecimal(value));
  }

  get dailyLiquidateUSD(): BigDecimal {
    let value = this.get("dailyLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyLiquidateUSD(value: BigDecimal) {
    this.set("dailyLiquidateUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeLiquidate(): BigInt {
    let value = this.get("dailyNativeLiquidate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeLiquidate(value: BigInt) {
    this.set("dailyNativeLiquidate", Value.fromBigInt(value));
  }

  get cumulativeLiquidateUSD(): BigDecimal {
    let value = this.get("cumulativeLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeLiquidateUSD(value: BigDecimal) {
    this.set("cumulativeLiquidateUSD", Value.fromBigDecimal(value));
  }

  get dailyWithdrawUSD(): BigDecimal {
    let value = this.get("dailyWithdrawUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyWithdrawUSD(value: BigDecimal) {
    this.set("dailyWithdrawUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeWithdraw(): BigInt {
    let value = this.get("dailyNativeWithdraw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeWithdraw(value: BigInt) {
    this.set("dailyNativeWithdraw", Value.fromBigInt(value));
  }

  get dailyRepayUSD(): BigDecimal {
    let value = this.get("dailyRepayUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyRepayUSD(value: BigDecimal) {
    this.set("dailyRepayUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeRepay(): BigInt {
    let value = this.get("dailyNativeRepay");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeRepay(value: BigInt) {
    this.set("dailyNativeRepay", Value.fromBigInt(value));
  }

  get dailyTransferUSD(): BigDecimal {
    let value = this.get("dailyTransferUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTransferUSD(value: BigDecimal) {
    this.set("dailyTransferUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeTransfer(): BigInt {
    let value = this.get("dailyNativeTransfer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeTransfer(value: BigInt) {
    this.set("dailyNativeTransfer", Value.fromBigInt(value));
  }

  get cumulativeTransferUSD(): BigDecimal {
    let value = this.get("cumulativeTransferUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTransferUSD(value: BigDecimal) {
    this.set("cumulativeTransferUSD", Value.fromBigDecimal(value));
  }

  get dailyFlashloanUSD(): BigDecimal {
    let value = this.get("dailyFlashloanUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyFlashloanUSD(value: BigDecimal) {
    this.set("dailyFlashloanUSD", Value.fromBigDecimal(value));
  }

  get dailyNativeFlashloan(): BigInt {
    let value = this.get("dailyNativeFlashloan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyNativeFlashloan(value: BigInt) {
    this.set("dailyNativeFlashloan", Value.fromBigInt(value));
  }

  get cumulativeFlashloanUSD(): BigDecimal {
    let value = this.get("cumulativeFlashloanUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeFlashloanUSD(value: BigDecimal) {
    this.set("cumulativeFlashloanUSD", Value.fromBigDecimal(value));
  }

  get dailyActiveUsers(): i32 {
    let value = this.get("dailyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveUsers(value: i32) {
    this.set("dailyActiveUsers", Value.fromI32(value));
  }

  get dailyActiveDepositors(): i32 {
    let value = this.get("dailyActiveDepositors");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveDepositors(value: i32) {
    this.set("dailyActiveDepositors", Value.fromI32(value));
  }

  get dailyActiveBorrowers(): i32 {
    let value = this.get("dailyActiveBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveBorrowers(value: i32) {
    this.set("dailyActiveBorrowers", Value.fromI32(value));
  }

  get dailyActiveLiquidators(): i32 {
    let value = this.get("dailyActiveLiquidators");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveLiquidators(value: i32) {
    this.set("dailyActiveLiquidators", Value.fromI32(value));
  }

  get dailyActiveLiquidatees(): i32 {
    let value = this.get("dailyActiveLiquidatees");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveLiquidatees(value: i32) {
    this.set("dailyActiveLiquidatees", Value.fromI32(value));
  }

  get dailyActiveTransferrers(): i32 {
    let value = this.get("dailyActiveTransferrers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveTransferrers(value: i32) {
    this.set("dailyActiveTransferrers", Value.fromI32(value));
  }

  get dailyActiveFlashloaners(): i32 {
    let value = this.get("dailyActiveFlashloaners");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveFlashloaners(value: i32) {
    this.set("dailyActiveFlashloaners", Value.fromI32(value));
  }

  get dailyDepositCount(): i32 {
    let value = this.get("dailyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyDepositCount(value: i32) {
    this.set("dailyDepositCount", Value.fromI32(value));
  }

  get dailyWithdrawCount(): i32 {
    let value = this.get("dailyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyWithdrawCount(value: i32) {
    this.set("dailyWithdrawCount", Value.fromI32(value));
  }

  get dailyBorrowCount(): i32 {
    let value = this.get("dailyBorrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyBorrowCount(value: i32) {
    this.set("dailyBorrowCount", Value.fromI32(value));
  }

  get dailyRepayCount(): i32 {
    let value = this.get("dailyRepayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyRepayCount(value: i32) {
    this.set("dailyRepayCount", Value.fromI32(value));
  }

  get dailyLiquidateCount(): i32 {
    let value = this.get("dailyLiquidateCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyLiquidateCount(value: i32) {
    this.set("dailyLiquidateCount", Value.fromI32(value));
  }

  get dailyTransferCount(): i32 {
    let value = this.get("dailyTransferCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyTransferCount(value: i32) {
    this.set("dailyTransferCount", Value.fromI32(value));
  }

  get dailyFlashloanCount(): i32 {
    let value = this.get("dailyFlashloanCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyFlashloanCount(value: i32) {
    this.set("dailyFlashloanCount", Value.fromI32(value));
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get lendingPositionCount(): i32 {
    let value = this.get("lendingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lendingPositionCount(value: i32) {
    this.set("lendingPositionCount", Value.fromI32(value));
  }

  get dailyActiveLendingPositionCount(): i32 {
    let value = this.get("dailyActiveLendingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveLendingPositionCount(value: i32) {
    this.set("dailyActiveLendingPositionCount", Value.fromI32(value));
  }

  get borrowingPositionCount(): i32 {
    let value = this.get("borrowingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowingPositionCount(value: i32) {
    this.set("borrowingPositionCount", Value.fromI32(value));
  }

  get dailyActiveBorrowingPositionCount(): i32 {
    let value = this.get("dailyActiveBorrowingPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveBorrowingPositionCount(value: i32) {
    this.set("dailyActiveBorrowingPositionCount", Value.fromI32(value));
  }
}

export class MarketHourlySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketHourlySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MarketHourlySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketHourlySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MarketHourlySnapshot | null {
    return changetype<MarketHourlySnapshot | null>(
      store.get_in_block("MarketHourlySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): MarketHourlySnapshot | null {
    return changetype<MarketHourlySnapshot | null>(
      store.get("MarketHourlySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hours(): i32 {
    let value = this.get("hours");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hours(value: i32) {
    this.set("hours", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get relation(): Bytes | null {
    let value = this.get("relation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set relation(value: Bytes | null) {
    if (!value) {
      this.unset("relation");
    } else {
      this.set("relation", Value.fromBytes(<Bytes>value));
    }
  }

  get rewardTokens(): Array<string> | null {
    let value = this.get("rewardTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rewardTokens(value: Array<string> | null) {
    if (!value) {
      this.unset("rewardTokens");
    } else {
      this.set("rewardTokens", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get stakedOutputTokenAmount(): BigInt | null {
    let value = this.get("stakedOutputTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedOutputTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedOutputTokenAmount");
    } else {
      this.set("stakedOutputTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get inputTokenBalance(): BigInt {
    let value = this.get("inputTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set inputTokenBalance(value: BigInt) {
    this.set("inputTokenBalance", Value.fromBigInt(value));
  }

  get inputTokenPriceUSD(): BigDecimal {
    let value = this.get("inputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set inputTokenPriceUSD(value: BigDecimal) {
    this.set("inputTokenPriceUSD", Value.fromBigDecimal(value));
  }

  get outputTokenSupply(): BigInt | null {
    let value = this.get("outputTokenSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set outputTokenSupply(value: BigInt | null) {
    if (!value) {
      this.unset("outputTokenSupply");
    } else {
      this.set("outputTokenSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get outputTokenPriceUSD(): BigDecimal | null {
    let value = this.get("outputTokenPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set outputTokenPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("outputTokenPriceUSD");
    } else {
      this.set("outputTokenPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get exchangeRate(): BigDecimal | null {
    let value = this.get("exchangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set exchangeRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("exchangeRate");
    } else {
      this.set("exchangeRate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get rates(): Array<string> | null {
    let value = this.get("rates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rates(value: Array<string> | null) {
    if (!value) {
      this.unset("rates");
    } else {
      this.set("rates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get reserves(): BigDecimal | null {
    let value = this.get("reserves");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set reserves(value: BigDecimal | null) {
    if (!value) {
      this.unset("reserves");
    } else {
      this.set("reserves", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get variableBorrowedTokenBalance(): BigInt | null {
    let value = this.get("variableBorrowedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set variableBorrowedTokenBalance(value: BigInt | null) {
    if (!value) {
      this.unset("variableBorrowedTokenBalance");
    } else {
      this.set("variableBorrowedTokenBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get stableBorrowedTokenBalance(): BigInt | null {
    let value = this.get("stableBorrowedTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stableBorrowedTokenBalance(value: BigInt | null) {
    if (!value) {
      this.unset("stableBorrowedTokenBalance");
    } else {
      this.set("stableBorrowedTokenBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("hourlySupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlySupplySideRevenueUSD(value: BigDecimal) {
    this.set("hourlySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("hourlyProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("hourlyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyTotalRevenueUSD(): BigDecimal {
    let value = this.get("hourlyTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyTotalRevenueUSD(value: BigDecimal) {
    this.set("hourlyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get totalDepositBalanceUSD(): BigDecimal {
    let value = this.get("totalDepositBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDepositBalanceUSD(value: BigDecimal) {
    this.set("totalDepositBalanceUSD", Value.fromBigDecimal(value));
  }

  get hourlyDepositUSD(): BigDecimal {
    let value = this.get("hourlyDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyDepositUSD(value: BigDecimal) {
    this.set("hourlyDepositUSD", Value.fromBigDecimal(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get totalBorrowBalanceUSD(): BigDecimal {
    let value = this.get("totalBorrowBalanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowBalanceUSD(value: BigDecimal) {
    this.set("totalBorrowBalanceUSD", Value.fromBigDecimal(value));
  }

  get hourlyBorrowUSD(): BigDecimal {
    let value = this.get("hourlyBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyBorrowUSD(value: BigDecimal) {
    this.set("hourlyBorrowUSD", Value.fromBigDecimal(value));
  }

  get cumulativeBorrowUSD(): BigDecimal {
    let value = this.get("cumulativeBorrowUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeBorrowUSD(value: BigDecimal) {
    this.set("cumulativeBorrowUSD", Value.fromBigDecimal(value));
  }

  get hourlyLiquidateUSD(): BigDecimal {
    let value = this.get("hourlyLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyLiquidateUSD(value: BigDecimal) {
    this.set("hourlyLiquidateUSD", Value.fromBigDecimal(value));
  }

  get cumulativeLiquidateUSD(): BigDecimal {
    let value = this.get("cumulativeLiquidateUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeLiquidateUSD(value: BigDecimal) {
    this.set("cumulativeLiquidateUSD", Value.fromBigDecimal(value));
  }

  get hourlyWithdrawUSD(): BigDecimal {
    let value = this.get("hourlyWithdrawUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyWithdrawUSD(value: BigDecimal) {
    this.set("hourlyWithdrawUSD", Value.fromBigDecimal(value));
  }

  get hourlyRepayUSD(): BigDecimal {
    let value = this.get("hourlyRepayUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyRepayUSD(value: BigDecimal) {
    this.set("hourlyRepayUSD", Value.fromBigDecimal(value));
  }

  get hourlyTransferUSD(): BigDecimal {
    let value = this.get("hourlyTransferUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyTransferUSD(value: BigDecimal) {
    this.set("hourlyTransferUSD", Value.fromBigDecimal(value));
  }

  get hourlyFlashloanUSD(): BigDecimal {
    let value = this.get("hourlyFlashloanUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyFlashloanUSD(value: BigDecimal) {
    this.set("hourlyFlashloanUSD", Value.fromBigDecimal(value));
  }
}

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Account | null {
    return changetype<Account | null>(
      store.get_in_block("Account", id.toHexString()),
    );
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "positions",
    );
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get borrowCount(): i32 {
    let value = this.get("borrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowCount(value: i32) {
    this.set("borrowCount", Value.fromI32(value));
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "borrows",
    );
  }

  get repayCount(): i32 {
    let value = this.get("repayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayCount(value: i32) {
    this.set("repayCount", Value.fromI32(value));
  }

  get repays(): RepayLoader {
    return new RepayLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "repays",
    );
  }

  get liquidateCount(): i32 {
    let value = this.get("liquidateCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidateCount(value: i32) {
    this.set("liquidateCount", Value.fromI32(value));
  }

  get liquidates(): LiquidateLoader {
    return new LiquidateLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "liquidates",
    );
  }

  get liquidationCount(): i32 {
    let value = this.get("liquidationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidationCount(value: i32) {
    this.set("liquidationCount", Value.fromI32(value));
  }

  get liquidations(): LiquidateLoader {
    return new LiquidateLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "liquidations",
    );
  }

  get transferredCount(): i32 {
    let value = this.get("transferredCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transferredCount(value: i32) {
    this.set("transferredCount", Value.fromI32(value));
  }

  get transfers(): TransferLoader {
    return new TransferLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "transfers",
    );
  }

  get receivedCount(): i32 {
    let value = this.get("receivedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set receivedCount(value: i32) {
    this.set("receivedCount", Value.fromI32(value));
  }

  get receives(): TransferLoader {
    return new TransferLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "receives",
    );
  }

  get flashloanCount(): i32 {
    let value = this.get("flashloanCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set flashloanCount(value: i32) {
    this.set("flashloanCount", Value.fromI32(value));
  }

  get flashloans(): FlashloanLoader {
    return new FlashloanLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "flashloans",
    );
  }

  get rewardsClaimedUSD(): BigDecimal | null {
    let value = this.get("rewardsClaimedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set rewardsClaimedUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("rewardsClaimedUSD");
    } else {
      this.set("rewardsClaimedUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Position", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Position | null {
    return changetype<Position | null>(store.get_in_block("Position", id));
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get hashOpened(): Bytes {
    let value = this.get("hashOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hashOpened(value: Bytes) {
    this.set("hashOpened", Value.fromBytes(value));
  }

  get hashClosed(): Bytes | null {
    let value = this.get("hashClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hashClosed(value: Bytes | null) {
    if (!value) {
      this.unset("hashClosed");
    } else {
      this.set("hashClosed", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumberOpened(): BigInt {
    let value = this.get("blockNumberOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumberOpened(value: BigInt) {
    this.set("blockNumberOpened", Value.fromBigInt(value));
  }

  get timestampOpened(): BigInt {
    let value = this.get("timestampOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestampOpened(value: BigInt) {
    this.set("timestampOpened", Value.fromBigInt(value));
  }

  get blockNumberClosed(): BigInt | null {
    let value = this.get("blockNumberClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumberClosed(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumberClosed");
    } else {
      this.set("blockNumberClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestampClosed(): BigInt | null {
    let value = this.get("timestampClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestampClosed(value: BigInt | null) {
    if (!value) {
      this.unset("timestampClosed");
    } else {
      this.set("timestampClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get side(): string {
    let value = this.get("side");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set side(value: string) {
    this.set("side", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get isCollateral(): boolean {
    let value = this.get("isCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCollateral(value: boolean) {
    this.set("isCollateral", Value.fromBoolean(value));
  }

  get isIsolated(): boolean {
    let value = this.get("isIsolated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isIsolated(value: boolean) {
    this.set("isIsolated", Value.fromBoolean(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get principal(): BigInt | null {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt | null) {
    if (!value) {
      this.unset("principal");
    } else {
      this.set("principal", Value.fromBigInt(<BigInt>value));
    }
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Position",
      this.get("id")!.toString(),
      "deposits",
    );
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Position",
      this.get("id")!.toString(),
      "withdraws",
    );
  }

  get borrowCount(): i32 {
    let value = this.get("borrowCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set borrowCount(value: i32) {
    this.set("borrowCount", Value.fromI32(value));
  }

  get borrows(): BorrowLoader {
    return new BorrowLoader("Position", this.get("id")!.toString(), "borrows");
  }

  get repayCount(): i32 {
    let value = this.get("repayCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set repayCount(value: i32) {
    this.set("repayCount", Value.fromI32(value));
  }

  get repays(): RepayLoader {
    return new RepayLoader("Position", this.get("id")!.toString(), "repays");
  }

  get liquidationCount(): i32 {
    let value = this.get("liquidationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidationCount(value: i32) {
    this.set("liquidationCount", Value.fromI32(value));
  }

  get liquidations(): LiquidateLoader {
    return new LiquidateLoader(
      "Position",
      this.get("id")!.toString(),
      "liquidations",
    );
  }

  get transferredCount(): i32 {
    let value = this.get("transferredCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transferredCount(value: i32) {
    this.set("transferredCount", Value.fromI32(value));
  }

  get receivedCount(): i32 {
    let value = this.get("receivedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set receivedCount(value: i32) {
    this.set("receivedCount", Value.fromI32(value));
  }

  get transfers(): TransferLoader {
    return new TransferLoader(
      "Position",
      this.get("id")!.toString(),
      "transfers",
    );
  }

  get snapshots(): PositionSnapshotLoader {
    return new PositionSnapshotLoader(
      "Position",
      this.get("id")!.toString(),
      "snapshots",
    );
  }
}

export class PositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PositionSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PositionSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get_in_block("PositionSnapshot", id),
    );
  }

  static load(id: string): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get("PositionSnapshot", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get balanceUSD(): BigDecimal {
    let value = this.get("balanceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set balanceUSD(value: BigDecimal) {
    this.set("balanceUSD", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get principal(): BigInt | null {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt | null) {
    if (!value) {
      this.unset("principal");
    } else {
      this.set("principal", Value.fromBigInt(<BigInt>value));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class _ActiveAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _ActiveAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _ActiveAccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_ActiveAccount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): _ActiveAccount | null {
    return changetype<_ActiveAccount | null>(
      store.get_in_block("_ActiveAccount", id),
    );
  }

  static load(id: string): _ActiveAccount | null {
    return changetype<_ActiveAccount | null>(store.get("_ActiveAccount", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class _PositionCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _PositionCounter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type _PositionCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_PositionCounter", id.toString(), this);
    }
  }

  static loadInBlock(id: string): _PositionCounter | null {
    return changetype<_PositionCounter | null>(
      store.get_in_block("_PositionCounter", id),
    );
  }

  static load(id: string): _PositionCounter | null {
    return changetype<_PositionCounter | null>(
      store.get("_PositionCounter", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nextCount(): i32 {
    let value = this.get("nextCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set nextCount(value: i32) {
    this.set("nextCount", Value.fromI32(value));
  }

  get lastTimestamp(): BigInt {
    let value = this.get("lastTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastTimestamp(value: BigInt) {
    this.set("lastTimestamp", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(
      store.get_in_block("Deposit", id.toHexString()),
    );
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get accountActor(): Bytes | null {
    let value = this.get("accountActor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountActor(value: Bytes | null) {
    if (!value) {
      this.unset("accountActor");
    } else {
      this.set("accountActor", Value.fromBytes(<Bytes>value));
    }
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdraw must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Withdraw", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(
      store.get_in_block("Withdraw", id.toHexString()),
    );
  }

  static load(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get accountActor(): Bytes | null {
    let value = this.get("accountActor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountActor(value: Bytes | null) {
    if (!value) {
      this.unset("accountActor");
    } else {
      this.set("accountActor", Value.fromBytes(<Bytes>value));
    }
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Borrow extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Borrow must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Borrow", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Borrow | null {
    return changetype<Borrow | null>(
      store.get_in_block("Borrow", id.toHexString()),
    );
  }

  static load(id: Bytes): Borrow | null {
    return changetype<Borrow | null>(store.get("Borrow", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get accountActor(): Bytes | null {
    let value = this.get("accountActor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountActor(value: Bytes | null) {
    if (!value) {
      this.unset("accountActor");
    } else {
      this.set("accountActor", Value.fromBytes(<Bytes>value));
    }
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Repay extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Repay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Repay must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Repay", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Repay | null {
    return changetype<Repay | null>(
      store.get_in_block("Repay", id.toHexString()),
    );
  }

  static load(id: Bytes): Repay | null {
    return changetype<Repay | null>(store.get("Repay", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get accountActor(): Bytes | null {
    let value = this.get("accountActor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountActor(value: Bytes | null) {
    if (!value) {
      this.unset("accountActor");
    } else {
      this.set("accountActor", Value.fromBytes(<Bytes>value));
    }
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get position(): string {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Liquidate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Liquidate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Liquidate", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Liquidate | null {
    return changetype<Liquidate | null>(
      store.get_in_block("Liquidate", id.toHexString()),
    );
  }

  static load(id: Bytes): Liquidate | null {
    return changetype<Liquidate | null>(
      store.get("Liquidate", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get liquidatee(): Bytes {
    let value = this.get("liquidatee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidatee(value: Bytes) {
    this.set("liquidatee", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get profitUSD(): BigDecimal {
    let value = this.get("profitUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set profitUSD(value: BigDecimal) {
    this.set("profitUSD", Value.fromBigDecimal(value));
  }
}

export class Transfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(
      store.get_in_block("Transfer", id.toHexString()),
    );
  }

  static load(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Flashloan extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Flashloan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Flashloan must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Flashloan", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Flashloan | null {
    return changetype<Flashloan | null>(
      store.get_in_block("Flashloan", id.toHexString()),
    );
  }

  static load(id: Bytes): Flashloan | null {
    return changetype<Flashloan | null>(
      store.get("Flashloan", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get accountActor(): Bytes | null {
    let value = this.get("accountActor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountActor(value: Bytes | null) {
    if (!value) {
      this.unset("accountActor");
    } else {
      this.set("accountActor", Value.fromBytes(<Bytes>value));
    }
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get feeAmount(): BigInt | null {
    let value = this.get("feeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt | null) {
    if (!value) {
      this.unset("feeAmount");
    } else {
      this.set("feeAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get feeAmountUSD(): BigDecimal | null {
    let value = this.get("feeAmountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feeAmountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("feeAmountUSD");
    } else {
      this.set("feeAmountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class _PoolConfigurator extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _PoolConfigurator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type _PoolConfigurator must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_PoolConfigurator", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): _PoolConfigurator | null {
    return changetype<_PoolConfigurator | null>(
      store.get_in_block("_PoolConfigurator", id.toHexString()),
    );
  }

  static load(id: Bytes): _PoolConfigurator | null {
    return changetype<_PoolConfigurator | null>(
      store.get("_PoolConfigurator", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get market(): Bytes {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes) {
    this.set("market", Value.fromBytes(value));
  }
}

export class _Loan extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _Loan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type _Loan must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_Loan", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): _Loan | null {
    return changetype<_Loan | null>(
      store.get_in_block("_Loan", id.toHexString()),
    );
  }

  static load(id: Bytes): _Loan | null {
    return changetype<_Loan | null>(store.get("_Loan", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get market(): Bytes | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromBytes(<Bytes>value));
    }
  }

  get loanManager(): Bytes | null {
    let value = this.get("loanManager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set loanManager(value: Bytes | null) {
    if (!value) {
      this.unset("loanManager");
    } else {
      this.set("loanManager", Value.fromBytes(<Bytes>value));
    }
  }

  get borrower(): Bytes | null {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes | null) {
    if (!value) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromBytes(<Bytes>value));
    }
  }

  get gracePeriod(): BigInt | null {
    let value = this.get("gracePeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gracePeriod(value: BigInt | null) {
    if (!value) {
      this.unset("gracePeriod");
    } else {
      this.set("gracePeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get isDefaulted(): boolean {
    let value = this.get("isDefaulted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDefaulted(value: boolean) {
    this.set("isDefaulted", Value.fromBoolean(value));
  }

  get receivableTokenId(): BigInt | null {
    let value = this.get("receivableTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set receivableTokenId(value: BigInt | null) {
    if (!value) {
      this.unset("receivableTokenId");
    } else {
      this.set("receivableTokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get principal(): BigInt | null {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt | null) {
    if (!value) {
      this.unset("principal");
    } else {
      this.set("principal", Value.fromBigInt(<BigInt>value));
    }
  }

  get interestRate(): BigInt | null {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestRate(value: BigInt | null) {
    if (!value) {
      this.unset("interestRate");
    } else {
      this.set("interestRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get lateInterestPremiumRate(): BigInt | null {
    let value = this.get("lateInterestPremiumRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lateInterestPremiumRate(value: BigInt | null) {
    if (!value) {
      this.unset("lateInterestPremiumRate");
    } else {
      this.set("lateInterestPremiumRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get financeTimestamp(): BigInt | null {
    let value = this.get("financeTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set financeTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("financeTimestamp");
    } else {
      this.set("financeTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get maturityTimestamp(): BigInt | null {
    let value = this.get("maturityTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturityTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("maturityTimestamp");
    } else {
      this.set("maturityTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}

export class _WithdrawalRequest extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _WithdrawalRequest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type _WithdrawalRequest must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_WithdrawalRequest", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): _WithdrawalRequest | null {
    return changetype<_WithdrawalRequest | null>(
      store.get_in_block("_WithdrawalRequest", id.toHexString()),
    );
  }

  static load(id: Bytes): _WithdrawalRequest | null {
    return changetype<_WithdrawalRequest | null>(
      store.get("_WithdrawalRequest", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get market(): Bytes | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromBytes(<Bytes>value));
    }
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get lockedShare(): BigInt | null {
    let value = this.get("lockedShare");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockedShare(value: BigInt | null) {
    if (!value) {
      this.unset("lockedShare");
    } else {
      this.set("lockedShare", Value.fromBigInt(<BigInt>value));
    }
  }

  get withdrawnShare(): BigInt | null {
    let value = this.get("withdrawnShare");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdrawnShare(value: BigInt | null) {
    if (!value) {
      this.unset("withdrawnShare");
    } else {
      this.set("withdrawnShare", Value.fromBigInt(<BigInt>value));
    }
  }

  get exitCycleId(): BigInt | null {
    let value = this.get("exitCycleId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exitCycleId(value: BigInt | null) {
    if (!value) {
      this.unset("exitCycleId");
    } else {
      this.set("exitCycleId", Value.fromBigInt(<BigInt>value));
    }
  }

  get withdrawer(): Bytes | null {
    let value = this.get("withdrawer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withdrawer(value: Bytes | null) {
    if (!value) {
      this.unset("withdrawer");
    } else {
      this.set("withdrawer", Value.fromBytes(<Bytes>value));
    }
  }
}

export class _ExitConfigs extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _ExitConfigs entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type _ExitConfigs must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_ExitConfigs", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): _ExitConfigs | null {
    return changetype<_ExitConfigs | null>(
      store.get_in_block("_ExitConfigs", id.toHexString()),
    );
  }

  static load(id: Bytes): _ExitConfigs | null {
    return changetype<_ExitConfigs | null>(
      store.get("_ExitConfigs", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get market(): Bytes | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set market(value: Bytes | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromBytes(<Bytes>value));
    }
  }

  get exitCycleId(): i32 {
    let value = this.get("exitCycleId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set exitCycleId(value: i32) {
    this.set("exitCycleId", Value.fromI32(value));
  }

  get cycleDuration(): i32 {
    let value = this.get("cycleDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cycleDuration(value: i32) {
    this.set("cycleDuration", Value.fromI32(value));
  }

  get windowDuration(): i32 {
    let value = this.get("windowDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set windowDuration(value: i32) {
    this.set("windowDuration", Value.fromI32(value));
  }
}

export class UsageMetricsDailySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UsageMetricsDailySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UsageMetricsDailySnapshot[]>(value);
  }
}

export class UsageMetricsHourlySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UsageMetricsHourlySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UsageMetricsHourlySnapshot[]>(value);
  }
}

export class FinancialsDailySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FinancialsDailySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FinancialsDailySnapshot[]>(value);
  }
}

export class MarketLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Market[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Market[]>(value);
  }
}

export class PositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Position[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Position[]>(value);
  }
}

export class MarketDailySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketDailySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketDailySnapshot[]>(value);
  }
}

export class MarketHourlySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketHourlySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketHourlySnapshot[]>(value);
  }
}

export class DepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deposit[]>(value);
  }
}

export class WithdrawLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Withdraw[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Withdraw[]>(value);
  }
}

export class BorrowLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Borrow[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Borrow[]>(value);
  }
}

export class RepayLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Repay[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Repay[]>(value);
  }
}

export class LiquidateLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Liquidate[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Liquidate[]>(value);
  }
}

export class TransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transfer[]>(value);
  }
}

export class FlashloanLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Flashloan[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Flashloan[]>(value);
  }
}

export class _LoanLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): _Loan[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<_Loan[]>(value);
  }
}

export class _ExitConfigsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): _ExitConfigs[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<_ExitConfigs[]>(value);
  }
}

export class _WithdrawalRequestLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): _WithdrawalRequest[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<_WithdrawalRequest[]>(value);
  }
}

export class PositionSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PositionSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PositionSnapshot[]>(value);
  }
}
