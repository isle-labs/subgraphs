// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Pool__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfAssets(account_: Address): BigInt {
    let result = super.call(
      "balanceOfAssets",
      "balanceOfAssets(address):(uint256)",
      [ethereum.Value.fromAddress(account_)],
    );

    return result[0].toBigInt();
  }

  try_balanceOfAssets(account_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfAssets",
      "balanceOfAssets(address):(uint256)",
      [ethereum.Value.fromAddress(account_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  configurator(): Address {
    let result = super.call("configurator", "configurator():(address)", []);

    return result[0].toAddress();
  }

  try_configurator(): ethereum.CallResult<Address> {
    let result = super.tryCall("configurator", "configurator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  convertToAssets(shares_: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToExitAssets(shares_: BigInt): BigInt {
    let result = super.call(
      "convertToExitAssets",
      "convertToExitAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );

    return result[0].toBigInt();
  }

  try_convertToExitAssets(shares_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToExitAssets",
      "convertToExitAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToExitShares(assets_: BigInt): BigInt {
    let result = super.call(
      "convertToExitShares",
      "convertToExitShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );

    return result[0].toBigInt();
  }

  try_convertToExitShares(assets_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToExitShares",
      "convertToExitShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets_: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposit(assets: BigInt, receiver: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_deposit(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWithPermit(
    assets_: BigInt,
    receiver_: Address,
    deadline_: BigInt,
    v_: i32,
    r_: Bytes,
    s_: Bytes,
  ): BigInt {
    let result = super.call(
      "depositWithPermit",
      "depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromUnsignedBigInt(deadline_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v_)),
        ethereum.Value.fromFixedBytes(r_),
        ethereum.Value.fromFixedBytes(s_),
      ],
    );

    return result[0].toBigInt();
  }

  try_depositWithPermit(
    assets_: BigInt,
    receiver_: Address,
    deadline_: BigInt,
    v_: i32,
    r_: Bytes,
    s_: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWithPermit",
      "depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromUnsignedBigInt(deadline_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v_)),
        ethereum.Value.fromFixedBytes(r_),
        ethereum.Value.fromFixedBytes(s_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eip712Domain(): Pool__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );

    return new Pool__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray(),
    );
  }

  try_eip712Domain(): ethereum.CallResult<Pool__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray(),
      ),
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxDeposit(receiver_: Address): BigInt {
    let result = super.call("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(receiver_),
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(receiver_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(receiver_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(receiver_: Address): BigInt {
    let result = super.call("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(receiver_),
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(receiver_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(receiver_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(owner_: Address): BigInt {
    let result = super.call("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(owner_),
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(owner_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(owner_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(owner_: Address): BigInt {
    let result = super.call("maxWithdraw", "maxWithdraw(address):(uint256)", [
      ethereum.Value.fromAddress(owner_),
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(owner_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdraw",
      "maxWithdraw(address):(uint256)",
      [ethereum.Value.fromAddress(owner_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, receiver: Address): BigInt {
    let result = super.call("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintWithPermit(
    shares_: BigInt,
    receiver_: Address,
    maxAssets_: BigInt,
    deadline_: BigInt,
    v_: i32,
    r_: Bytes,
    s_: Bytes,
  ): BigInt {
    let result = super.call(
      "mintWithPermit",
      "mintWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromUnsignedBigInt(maxAssets_),
        ethereum.Value.fromUnsignedBigInt(deadline_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v_)),
        ethereum.Value.fromFixedBytes(r_),
        ethereum.Value.fromFixedBytes(s_),
      ],
    );

    return result[0].toBigInt();
  }

  try_mintWithPermit(
    shares_: BigInt,
    receiver_: Address,
    maxAssets_: BigInt,
    deadline_: BigInt,
    v_: i32,
    r_: Bytes,
    s_: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintWithPermit",
      "mintWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromUnsignedBigInt(maxAssets_),
        ethereum.Value.fromUnsignedBigInt(deadline_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v_)),
        ethereum.Value.fromFixedBytes(r_),
        ethereum.Value.fromFixedBytes(s_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewDeposit(assets_: BigInt): BigInt {
    let result = super.call(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(assets_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares_: BigInt): BigInt {
    let result = super.call("previewMint", "previewMint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares_),
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewMint",
      "previewMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares_: BigInt): BigInt {
    let result = super.call(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );

    return result[0].toBigInt();
  }

  try_previewRedeem(shares_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets_: BigInt): BigInt {
    let result = super.call(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(shares_: BigInt, receiver_: Address, owner_: Address): BigInt {
    let result = super.call(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromAddress(owner_),
      ],
    );

    return result[0].toBigInt();
  }

  try_redeem(
    shares_: BigInt,
    receiver_: Address,
    owner_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromAddress(owner_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeShares(shares_: BigInt, owner_: Address): BigInt {
    let result = super.call(
      "removeShares",
      "removeShares(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares_),
        ethereum.Value.fromAddress(owner_),
      ],
    );

    return result[0].toBigInt();
  }

  try_removeShares(
    shares_: BigInt,
    owner_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeShares",
      "removeShares(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares_),
        ethereum.Value.fromAddress(owner_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unrealizedLosses(): BigInt {
    let result = super.call(
      "unrealizedLosses",
      "unrealizedLosses():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_unrealizedLosses(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unrealizedLosses",
      "unrealizedLosses():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(assets_: BigInt, receiver_: Address, owner_: Address): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromAddress(owner_),
      ],
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    assets_: BigInt,
    receiver_: Address,
    owner_: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets_),
        ethereum.Value.fromAddress(receiver_),
        ethereum.Value.fromAddress(owner_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get configurator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get asset_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get assets_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r_(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get shares_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintWithPermitCall extends ethereum.Call {
  get inputs(): MintWithPermitCall__Inputs {
    return new MintWithPermitCall__Inputs(this);
  }

  get outputs(): MintWithPermitCall__Outputs {
    return new MintWithPermitCall__Outputs(this);
  }
}

export class MintWithPermitCall__Inputs {
  _call: MintWithPermitCall;

  constructor(call: MintWithPermitCall) {
    this._call = call;
  }

  get shares_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxAssets_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v_(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r_(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s_(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class MintWithPermitCall__Outputs {
  _call: MintWithPermitCall;

  constructor(call: MintWithPermitCall) {
    this._call = call;
  }

  get assets_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get assets_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveSharesCall extends ethereum.Call {
  get inputs(): RemoveSharesCall__Inputs {
    return new RemoveSharesCall__Inputs(this);
  }

  get outputs(): RemoveSharesCall__Outputs {
    return new RemoveSharesCall__Outputs(this);
  }
}

export class RemoveSharesCall__Inputs {
  _call: RemoveSharesCall;

  constructor(call: RemoveSharesCall) {
    this._call = call;
  }

  get shares_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get owner_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveSharesCall__Outputs {
  _call: RemoveSharesCall;

  constructor(call: RemoveSharesCall) {
    this._call = call;
  }

  get sharesReturned_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RequestRedeemCall extends ethereum.Call {
  get inputs(): RequestRedeemCall__Inputs {
    return new RequestRedeemCall__Inputs(this);
  }

  get outputs(): RequestRedeemCall__Outputs {
    return new RequestRedeemCall__Outputs(this);
  }
}

export class RequestRedeemCall__Inputs {
  _call: RequestRedeemCall;

  constructor(call: RequestRedeemCall) {
    this._call = call;
  }

  get shares_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get owner_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RequestRedeemCall__Outputs {
  _call: RequestRedeemCall;

  constructor(call: RequestRedeemCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
